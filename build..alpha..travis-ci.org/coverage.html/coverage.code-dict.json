{"/home/travis/build/npmtest/node-npmtest-mockery/test.js":"/* istanbul instrument in package npmtest_mockery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mockery/lib.npmtest_mockery.js":"/* istanbul instrument in package npmtest_mockery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mockery = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mockery = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mockery/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mockery && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mockery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mockery\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mockery.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mockery.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mockery.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mockery.__dirname + '/lib.npmtest_mockery.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mockery/node_modules/mockery/mockery.js":"/*\n Copyrights for code authored by Yahoo! Inc. is licensed under the following\n terms:\n\n MIT License\n\n Copyright (c) 2011-2012 Yahoo! Inc. All Rights Reserved.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to\n deal in the Software without restriction, including without limitation the\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n DEALINGS IN THE SOFTWARE.\n*/\n\n/*\n * A library that enables the hooking of the standard 'require' function, such\n * that a (possibly partial) mock implementation can be provided instead. This\n * is most useful for running unit tests, since any dependency obtained through\n * 'require' can be mocked out.\n */\n\n\"use strict\";\n\nvar m = require('module'),\n    registeredMocks = {},\n    registeredSubstitutes = {},\n    registeredAllowables = {},\n    originalLoader = null,\n    originalCache = null,\n    defaultOptions = {\n        useCleanCache: false,\n        warnOnReplace: true,\n        warnOnUnregistered: true\n    },\n    options = {};\n\n/*\n * Merge the supplied options in with a new copy of the default options to get\n * the effective options, and return those.\n */\nfunction getEffectiveOptions(opts) {\n    var options = {};\n\n    Object.keys(defaultOptions).forEach(function (key) {\n        options[key] = defaultOptions[key];\n    });\n    if (opts) {\n        Object.keys(opts).forEach(function (key) {\n            options[key] = opts[key];\n        });\n    }\n    return options;\n}\n\n/*\n * The (private) loader replacement that is used when hooking is enabled. It\n * does the work of returning a mock or substitute when configured, reporting\n * non-allowed modules, and invoking the original loader when appropriate.\n * The signature of this function *must* match that of Node's Module._load,\n * since it will replace that when mockery is enabled.\n */\nfunction hookedLoader(request, parent, isMain) {\n    var subst, allow, file;\n\n    if (!originalLoader) {\n        throw new Error(\"Loader has not been hooked\");\n    }\n\n    if (registeredMocks.hasOwnProperty(request)) {\n        return registeredMocks[request];\n    }\n\n    if (registeredSubstitutes.hasOwnProperty(request)) {\n        subst = registeredSubstitutes[request];\n        if (!subst.module && subst.name) {\n            subst.module = originalLoader(subst.name, parent, isMain);\n        }\n        if (!subst.module) {\n            throw new Error(\"Misconfigured substitute for '\" + request + \"'\");\n        }\n        return subst.module;\n    }\n\n    if (registeredAllowables.hasOwnProperty(request)) {\n        allow = registeredAllowables[request];\n        if (allow.unhook) {\n            file = m._resolveFilename(request, parent);\n            if ((file.indexOf('/') !== -1 || file.indexOf('\\\\') !== -1) && allow.paths.indexOf(file) === -1) {\n                allow.paths.push(file);\n            }\n        }\n    } else {\n        if (options.warnOnUnregistered) {\n            console.warn(\"WARNING: loading non-allowed module: \" + request);\n        }\n    }\n\n    return originalLoader(request, parent, isMain);\n}\n\n/*\n * Enables mockery by hooking subsequent 'require' invocations. Note that *all*\n * 'require' invocations will be hooked until 'disable' is called. Calling this\n * function more than once will have no ill effects.\n */\nfunction enable(opts) {\n    if (originalLoader) {\n        // Already hooked\n        return;\n    }\n\n    options = getEffectiveOptions(opts);\n\n    if (options.useCleanCache) {\n        originalCache = m._cache;\n        m._cache = {};\n        repopulateNative();\n    }\n\n    originalLoader = m._load;\n    m._load = hookedLoader;\n}\n\n/*\n * Disables mockery by unhooking from the Node loader. No subsequent 'require'\n * invocations will be seen by mockery. Calling this function more than once\n * will have no ill effects.\n */\nfunction disable() {\n    if (!originalLoader) {\n        // Not hooked\n        return;\n    }\n\n    if (options.useCleanCache) {\n        // Previously this just set m._cache to originalCache. This would make\n        // node re-require native addons that were required while mockery was\n        // enabled, which breaks it in node@>=0.12. Instead populate\n        // originalCache with any native addons that were first required since\n        // mockery was enabled.\n        Object.keys(m._cache).forEach(function(k){\n            if (k.indexOf('\\.node') > -1 && !originalCache[k]) {\n                originalCache[k] = m._cache[k];\n            }\n        });\n        removeParentReferences();\n        m._cache = originalCache;\n        originalCache = null;\n    }\n\n    m._load = originalLoader;\n    originalLoader = null;\n}\n\n /*\n * If the clean cache option is in effect, reset the module cache to an empty\n * state. Calling this function when the clean cache option is not in effect\n * will have no ill effects, but will do nothing.\n */\nfunction resetCache() {\n    if (options.useCleanCache && originalCache) {\n        removeParentReferences();\n        m._cache = {};\n        repopulateNative();\n    }\n}\n\n/*\n * Starting in node 0.12 node won't reload native modules\n * The reason is that native modules can register themselves to be loaded automatically\n * This will re-populate the cache with the native modules that have not been mocked\n */\nfunction repopulateNative() {\n  Object.keys(originalCache).forEach(function(k) {\n      if (k.indexOf('\\.node') > -1 && !m._cache[k]) {\n          m._cache[k] = originalCache[k];\n      }\n  });\n}\n\n/*\n * Enable or disable warnings to the console when previously registered mocks\n * and subsitutes are replaced.\n */\nfunction warnOnReplace(enable) {\n    options.warnOnReplace = enable;\n}\n\n/*\n * Enable or disable warnings to the console when modules are loaded that have\n * not been registered as a mock, a substitute, or allowed.\n */\nfunction warnOnUnregistered(enable) {\n    options.warnOnUnregistered = enable;\n}\n\n/*\n * Register a mock object for the specified module. While mockery is enabled,\n * any subsequent 'require' for this module will return the mock object. The\n * mock need not mock out all original exports, but no fallback is provided\n * for anything not mocked and subsequently invoked.\n */\nfunction registerMock(mod, mock) {\n    if (options.warnOnReplace && registeredMocks.hasOwnProperty(mod)) {\n        console.warn(\"WARNING: Replacing existing mock for module: \" + mod);\n    }\n    registeredMocks[mod] = mock;\n}\n\n/*\n * Deregister a mock object for the specified module. A subsequent 'require' for\n * that module will revert to the previous behaviour (which, by default, means\n * falling back to the original 'require' behaviour).\n */\nfunction deregisterMock(mod) {\n    if (registeredMocks.hasOwnProperty(mod)) {\n        delete registeredMocks[mod];\n    }\n}\n\n/*\n * Register a substitute module for the specified module. While mockery is\n * enabled, any subsequent 'require' for this module will be effectively\n * replaced by a 'require' for the substitute module. This is useful when\n * a mock implementation is itself implemented as a module.\n */\nfunction registerSubstitute(mod, subst) {\n    if (options.warnOnReplace && registeredSubstitutes.hasOwnProperty(mod)) {\n        console.warn(\"WARNING: Replacing existing substitute for module: \" + mod);\n    }\n    registeredSubstitutes[mod] = {\n        name: subst\n    };\n}\n\n/*\n * Deregister a substitute module for the specified module. A subsequent\n * 'require' for that module will revert to the previous behaviour (which, by\n * default, means falling back to the original 'require' behaviour).\n */\nfunction deregisterSubstitute(mod) {\n    if (registeredSubstitutes.hasOwnProperty(mod)) {\n        delete registeredSubstitutes[mod];\n    }\n}\n\n/*\n * Register a module as 'allowed', meaning that, even if a mock or substitute\n * for it has not been registered, mockery will not complain when it is loaded\n * via 'require'. This encourages the user to consciously declare the modules\n * that will be loaded and used in the original form, thus avoiding warnings.\n *\n * If 'unhook' is true, the module will be removed from the module cache when\n * it is deregistered.\n */\nfunction registerAllowable(mod, unhook) {\n    registeredAllowables[mod] = {\n        unhook: !!unhook,\n        paths: []\n    };\n}\n\n/*\n * Register an array of modules as 'allowed'. This is a convenience function\n * that performs the same function as 'registerAllowable' but for an array of\n * modules rather than a single module.\n */\nfunction registerAllowables(mods, unhook) {\n    mods.forEach(function (mod) {\n        registerAllowable(mod, unhook);\n    });\n}\n\n/*\n * Deregister a module as 'allowed'. A subsequent 'require' for that module\n * will generate a warning that the module is not allowed, unless or until a\n * mock or substitute is registered for that module.\n */\nfunction deregisterAllowable(mod) {\n    if (registeredAllowables.hasOwnProperty(mod)) {\n        var allow = registeredAllowables[mod];\n        if (allow.unhook) {\n            allow.paths.forEach(function (p) {\n                delete m._cache[p];\n            });\n        }\n        delete registeredAllowables[mod];\n    }\n}\n\n/*\n * Deregister an array of modules as 'allowed'. This is a convenience function\n * that performs the same function as 'deregisterAllowable' but for an array of\n * modules rather than a single module.\n */\nfunction deregisterAllowables(mods) {\n    mods.forEach(function (mod) {\n        deregisterAllowable(mod);\n    });\n}\n\n/*\n * Deregister all mocks, substitutes, and allowed modules, resetting the state\n * to a clean slate. This does not affect the enabled / disabled state of\n * mockery, though.\n */\nfunction deregisterAll() {\n    Object.keys(registeredAllowables).forEach(function (mod) {\n        var allow = registeredAllowables[mod];\n        if (allow.unhook) {\n            allow.paths.forEach(function (p) {\n                delete m._cache[p];\n            });\n        }\n    });\n\n    registeredMocks = {};\n    registeredSubstitutes = {};\n    registeredAllowables = {};\n}\n\n/**\n * Remove references to modules in the mockery cache from\n * their parents' children.\n */\nfunction removeParentReferences() {\n    Object.keys(m._cache).forEach(function(k){\n        if (k.indexOf('\\.node') === -1) {\n            // don't touch native modules, because they're special\n            var mod = m._cache[k];\n            var idx = mod.parent.children.indexOf(mod);\n            if (idx > -1) {\n                mod.parent.children.splice(idx, 1);\n            }\n        }\n    });\n}\n\n// Exported functions\nexports.enable = enable;\nexports.disable = disable;\nexports.resetCache = resetCache;\nexports.warnOnReplace = warnOnReplace;\nexports.warnOnUnregistered = warnOnUnregistered;\nexports.registerMock = registerMock;\nexports.registerSubstitute = registerSubstitute;\nexports.registerAllowable = registerAllowable;\nexports.registerAllowables = registerAllowables;\nexports.deregisterMock = deregisterMock;\nexports.deregisterSubstitute = deregisterSubstitute;\nexports.deregisterAllowable = deregisterAllowable;\nexports.deregisterAllowables = deregisterAllowables;\nexports.deregisterAll = deregisterAll;\n"}